export default function heightTransition (transition) {
  let cancel
  function clearStyle (el) {
    el.style.height = ''
    el.style.transition = ''
    el.style.overflow = ''
    cancel = null
    console.log('clearStyle')
  }
  return {
    beforeEnter (el) {
      if (!cancel) {
        el.style.transition = ''
        el.style.visibility = 'hidden'
        el.style.position = 'absolute'
      }
    },
    enter (el, done) {
      if (cancel) {
        cancel()
      } else {
        el.style.width = parseInt(el.parentElement.offsetWidth) + 'px'

        setTimeout(() => { // wait for vue binding to style element before measuring
          const height = el.offsetHeight
          el.style.height = 0
          el.style.width = ''
          el.style.visibility = ''
          el.style.position = ''
          el.style.overflow = 'hidden'
          el.style.transition = transition
          el.style.transitionProperty = 'height'

          // requestAnimationFrame(() => {
          //   // console.log('#2', 'offsetHeight', el.offsetHeight, 'scrollHeight', el.scrollHeight)
          //   console.log('setting height', height)
          //   el.style.height = height + 'px'
          //   const afterEnd = () => {
          //     console.log('custom afterEnd!')
          //     el.removeEventListener('transitionend', afterEnd)
          //     // setTimeout(() => {
          //       clearStyle(el)
          //     // }, 100)
          //   }
          //   el.addEventListener('transitionend', afterEnd)
          // })

          requestAnimationFrame(() => {
            el.style.height = height + 'px'
            setTimeout(done, 400)
          })

          // setTimeout(() => {
          //   console.log('setting height', height)
          //   el.style.height = height + 'px'
          //   const afterEnd = () => {
          //     console.log('custom afterEnd!')
          //     el.removeEventListener('transitionend', afterEnd)
          //     setTimeout(done)
          //     // done()
          //     // clearStyle(el)
          //   }
          //   el.addEventListener('transitionend', afterEnd)
          // }, 30)

          // setTimeout(() => {
          //   console.log('setting height', height)
          //   el.style.height = height + 'px'
          // }, 30)
          cancel = () => {
            console.log('enter cancel')
            el.style.height = 0
          }
        }, 30)
      }
    },
    afterEnter: clearStyle,
    // afterEnter (el) {
    //   console.log('afterEnter')
    //   clearStyle(el)
    // },
    beforeLeave (el) {
      if (!cancel) {
        el.style.transition = ''
      }
    },
    leave (el) {
      if (cancel) {
        cancel()
      } else {
        const height = el.offsetHeight
        el.style.height = height + 'px'
        el.style.overflow = 'hidden'
        el.style.transition = transition
        setTimeout(() => {
          el.style.height = 0
        }, 30)
        cancel = () => {
          el.style.height = height + 'px'
        }
      }
    },
    afterLeave: clearStyle
  }
}
